package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"time"

	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_auth "github.com/grpc-ecosystem/go-grpc-middleware/auth"
	grpc_zap "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
	grpc_validator "github.com/grpc-ecosystem/go-grpc-middleware/validator"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/reflection"
	"google.golang.org/grpc/status"

	pb "middleware/proto/github.com/eamanzholov/middleware_auth"
)

type server struct {
	pb.UnimplementedAuthServiceServer
}

// ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bearer-—Ç–æ–∫–µ–Ω
func authFunc(ctx context.Context) (context.Context, error) {
	token, err := grpc_auth.AuthFromMD(ctx, "bearer")
	if err != nil {
		return nil, status.Error(codes.Unauthenticated, "no token provided")
	}
	if token != "super-secret" {
		return nil, status.Error(codes.PermissionDenied, "invalid token")
	}
	return ctx, nil
}

// ‚úÖ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ Login
func (s *server) Login(ctx context.Context, req *pb.LoginRequest) (*pb.LoginResponse, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è —á–µ—Ä–µ–∑ grpc_validator
	return &pb.LoginResponse{
		Token: fmt.Sprintf("fake-token-%d", time.Now().Unix()),
	}, nil
}

func main() {
	// –õ–æ–≥–≥–µ—Ä
	logger, _ := zap.NewProduction()

	// gRPC —Å–µ—Ä–≤–µ—Ä —Å middleware
	grpcServer := grpc.NewServer(
		grpc_middleware.WithUnaryServerChain(
			grpc_zap.UnaryServerInterceptor(logger),    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
			grpc_auth.UnaryServerInterceptor(authFunc), // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
			grpc_validator.UnaryServerInterceptor(),    // –í–∞–ª–∏–¥–∞—Ü–∏—è
		),
	)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
	pb.RegisterAuthServiceServer(grpcServer, &server{})

	// –í–∫–ª—é—á–∞–µ–º reflection (–¥–ª—è grpcurl –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
	reflection.Register(grpcServer)

	// –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	logger.Info("üöÄ gRPC server started on :50051")
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatal(err)
	}
}